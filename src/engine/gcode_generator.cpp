#include "gcode_generator.h"
#include <iostream>

GCodeGenerator::GCodeGenerator() : currentZ(0.0f) {}

void GCodeGenerator::setOutputFile(const std::string& path) {
    out.open(path);
    if (!out) {
        std::cerr << "[GCodeGenerator] Failed to open output file: " << path << std::endl;
    } else {
        std::cout << "[GCodeGenerator] Output file set to: " << path << std::endl;
    }
}

void GCodeGenerator::emitHeader() {
    out << "; G-code generated by S9Slicer\n";
    out << "G21 ; mm\n";
    out << "G90 ; absolute\n";
    out << "M82 ; absolute extrusion\n";
    out << "G28 ; home all axes\n";
}

void GCodeGenerator::emitLayer(const std::vector<Contour>& layer, float z) {
    currentZ = z;
    out << "; Layer at Z=" << z << "\n";
    out << "G1 Z" << z << " F1200\n";
    for (const auto& contour : layer) {
        if (contour.points.empty()) continue;
        out << "G0 X" << contour.points[0].x << " Y" << contour.points[0].y << "\n";
        for (size_t i = 1; i < contour.points.size(); ++i) {
            out << "G1 X" << contour.points[i].x << " Y" << contour.points[i].y << "\n";
        }
        out << "G1 X" << contour.points[0].x << " Y" << contour.points[0].y << " ; close\n";
    }
}

void GCodeGenerator::emitFooter() {
    out << "M104 S0 ; turn off hotend\n";
    out << "M140 S0 ; turn off bed\n";
    out << "G28 X0 ; home X\n";
    out << "M84 ; disable motors\n";
}
